Except written otherwise, numbers (including ports) are encoded in little endian
Except written otherwise, messages are valid client to server and server to client and on both protocols

Bridges configured are then identified by their index

Once a TCP bridge is connected, the connected sockets are not called bridges anymore, but connections

A connection is identified by its socket numbers, called socket keys, (i.e. the socket itself on unix (int) and win32 (SOCKET)) extended to be 8-byte and a 8-byte unique key (same on both sides) on client and server side.
The client side key is the ckey, the server key is the skey. Their byte order is irrelevant, they are treated as 8-byte sequences.

Message codes (excluding initial port transmission over TCP):

- 0 : No-op

- 1 : Config (configure a bridge, giving information on server-side endpoint)
	Client to server only
	* 2b : message size (proto + dst port + target name with null term)
	* 1b : protocol (0:TCP, 1:UDP)
	* 2b : dst port
	* ?b : target name, null-terminated

- 2 : Message (any proto, the bridge is on the same proto as the message was transmitted)
	if UDP:
	* 2b : bridge index
	* 4b : payload size
	* ?b : payload

	if TCP:
	* 8b : socket key
	* 8b : unique key
	* 4b: payload size
	* ?b : payload

- 3 : Connect (TCP only, client to server)
	tcp connected to client endpoint, do the same on server endpoint
	* 2b : bridge index
	* 8b : socket key
	* 8b : unique key

- 4 : UDP Connected (UDP only)

- 5 : TCP Disconnected (TCP Only)
	* 8b : socket key (ckey if server-client, skey if client-server : key of the recipient)
	* 8b : unique key

- 6 : TCP Established (TCP Only, client to server)
	* 8b : ckey 
	* 8b : unique key
	* 8b : skey

==============================================

Config file:

One line = One bridge

<tcp/udp> client_hostname client_port server_hostname server_port
